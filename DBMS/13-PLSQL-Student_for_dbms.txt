-- Create Student table
CREATE TABLE Student (
  roll_no NUMBER PRIMARY KEY,
  name VARCHAR2(100),
  subject_name VARCHAR2(100),
  subject_opted VARCHAR2(100)
);

-- Create Subject table
CREATE TABLE Subject (
  faculty_code NUMBER PRIMARY KEY,
  faculty_name VARCHAR2(100),
  specialization VARCHAR2(100)
);



DECLARE
  v_roll_no NUMBER;
  v_name VARCHAR2(100);
  v_subject_name VARCHAR2(100);
  v_subject_opted VARCHAR2(100);
  v_faculty_code NUMBER;
  v_faculty_name VARCHAR2(100);
  v_specialization VARCHAR2(100);
  v_students_for_dbms NUMBER;
BEGIN
  -- Accept data for Student table
  DBMS_OUTPUT.PUT('Enter Roll Number: ');
  v_roll_no := TO_NUMBER(&Enter_Roll_No);
  DBMS_OUTPUT.PUT('Enter Name: ');
  v_name := '&Enter_Name';
  DBMS_OUTPUT.PUT('Enter Subject Name: ');
  v_subject_name := '&Enter_Subject_Name';
  DBMS_OUTPUT.PUT('Enter Subject Opted: ');
  v_subject_opted := '&Enter_Subject_Opted';
  -- Validate subject_name to be 'DBMS'
  IF v_subject_name != 'DBMS' THEN
    DBMS_OUTPUT.PUT_LINE('Invalid subject! Please enter "DBMS".');
    RETURN;
  END IF;
  -- Insert values into Student table
  INSERT INTO Student (roll_no, name, subject_name, subject_opted)
  VALUES (v_roll_no, v_name, v_subject_name, v_subject_opted);
  -- Accept data for Subject table
  DBMS_OUTPUT.PUT('Enter Faculty Code: ');
  v_faculty_code := TO_NUMBER(&Enter_Faculty_Code);
  DBMS_OUTPUT.PUT('Enter Faculty Name: ');
  v_faculty_name := '&Enter_Faculty_Name';
  DBMS_OUTPUT.PUT('Enter Specialization: ');
  v_specialization := '&Enter_Specialization';
  -- Insert values into Subject table
  INSERT INTO Subject (faculty_code, faculty_name, specialization)
  VALUES (v_faculty_code, v_faculty_name, v_specialization);
  COMMIT; -- Commit the changes to the database
  DBMS_OUTPUT.PUT_LINE('Data successfully inserted into Student and Subject tables.');
  -- Query (i): Find the number of students who have enrolled for the subject "DBMS"
  SELECT COUNT(*) INTO v_students_for_dbms
  FROM Student
  WHERE subject_name = 'DBMS';
  DBMS_OUTPUT.PUT_LINE('Number of students enrolled for DBMS: ' || v_students_for_dbms);
  -- Query (ii): Find all those faculty members who have not offered any subject
  FOR faculty_record IN (SELECT DISTINCT faculty_code, faculty_name FROM Subject)
  LOOP
    DBMS_OUTPUT.PUT_LINE('Faculty Code: ' || faculty_record.faculty_code || ', Faculty Name: ' || faculty_record.faculty_name || ' has not offered any subject.');
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
